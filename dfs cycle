#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
 
#define MAXN 100006
 
vector<int> adj[MAXN];
vector<bool> visited(MAXN);
vector<int> parent(MAXN);
int cycle_start = -1, cycle_end = -1;
 
bool solve(int start, int par) {
    visited[start] = true;
    for (auto u : adj[start]) {
        if (!visited[u]) {
            parent[u] = start;
            if (solve(u, start)) return true;
        } else if (u != par) {
            cycle_end = start;
            cycle_start = u;
            return true;
        }
    }
    return false;
}
 
int main() {
    int n, m;
    cin >> n >> m;
 
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
 
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            if (solve(i, -1)) break;
        }
    }
 
    if (cycle_start == -1) {
        cout << "IMPOSSIBLE\n";
    } else {
        vector<int> path;
        path.push_back(cycle_start);
        int cur = cycle_end;
        while (cur != cycle_start) {
            path.push_back(cur);
            cur = parent[cur];
        }
        path.push_back(cycle_start);
        reverse(path.begin(), path.end());
        cout << path.size() << "\n";
        for (int u : path) cout << u << " ";
        cout << "\n";
    }
 
    return 0;
}
