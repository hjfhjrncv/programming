#include <bits/stdc++.h>
using namespace std;
 
const int MAX_N = 2e5;
vector<long long> seg(4 * MAX_N), lazy(4 * MAX_N);
vector<long long> arr;
 
void build(int node, int start, int end) {
    if (start == end) {
        seg[node] = arr[start];
    } else {
        int mid = (start + end) / 2;
        build(2 * node, start, mid);
        build(2 * node + 1, mid + 1, end);
        seg[node] = min(seg[2 * node], seg[2 * node + 1]);
    }
}
 
void push(int node, int start, int end) {
    if (lazy[node] != 0) {
        seg[node] += lazy[node];
        if (start != end) {
            lazy[2 * node] += lazy[node];
            lazy[2 * node + 1] += lazy[node];
        }
        lazy[node] = 0;
    }
}
 
void range_update(int node, int start, int end, int l, int r, long long val) {
    push(node, start, end);
    if (r < start || end < l) return;
    if (l <= start && end <= r) {
        lazy[node] += val;
        push(node, start, end);
        return;
    }
    int mid = (start + end) / 2;
    range_update(2 * node, start, mid, l, r, val);
    range_update(2 * node + 1, mid + 1, end, l, r, val);
    seg[node] = min(seg[2 * node], seg[2 * node + 1]);
}
 
long long point_query(int node, int start, int end, int idx) {
    push(node, start, end);
    if (start == end) {
        return seg[node];
    }
    int mid = (start + end) / 2;
    if (idx <= mid)
        return point_query(2 * node, start, mid, idx);
    else
        return point_query(2 * node + 1, mid + 1, end, idx);
}
 
int main() {
    int n, q;
    cin >> n >> q;
    arr.resize(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
 
    build(1, 0, n - 1);
 
    vector<int> ans;
    for (int i = 0; i < q; i++) {
        int type;
        cin >> type;
        if (type == 1) {
            int a, b, u;
            cin >> a >> b >> u;
            range_update(1, 0, n - 1, a - 1, b - 1, u);
        } else {
            int k;
            cin >> k;
            ans.push_back(point_query(1, 0, n - 1, k - 1));
        }
    }
 
    for (int res : ans) {
        cout << res << "\n";
    }
 
    return 0;
}
