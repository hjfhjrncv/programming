#include <iostream>
#include <vector>
#include <queue>
using namespace std;
 
bool bfs(int start, vector<int> adj[], vector<int>& colour) {
    queue<int> q;
    q.push(start);
    colour[start] = 0;
 
    while (!q.empty()) {
        int node = q.front(); q.pop();
        for (int v : adj[node]) {
            if (colour[v] == -1) {
                colour[v] = !colour[node];
                q.push(v);
            } else if (colour[v] == colour[node]) {
                return false;
            }
        }
    }
    return true;
}
 
int main() {
    int n, m;
    cin >> n >> m;
    vector<int> adj[n + 1]; // nodes are 1-indexed
 
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
 
    vector<int> colour(n + 1, -1);
 
    for (int i = 1; i <= n; i++) {
        if (colour[i] == -1) {
            if (!bfs(i, adj, colour)) {
                cout << "IMPOSSIBLE\n";
                return 0;
            }
        }
    }
 
    for (int i = 1; i <= n; i++) {
        cout << (colour[i] == 0 ? 1 : 2) << " ";
    }
    cout << "\n";
