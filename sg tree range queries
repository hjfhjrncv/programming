#include <bits/stdc++.h>
using namespace std;
 
const int MAX_N = 2e5; 
vector<long long> seg(4 * MAX_N);
 
void build(vector<long long>& arr, int node, int start, int end) {
    if (start == end) {
        seg[node] = arr[start];
    } else {
        int mid = (start + end) / 2;
        build(arr, 2 * node, start, mid);
        build(arr, 2 * node + 1, mid + 1, end);
        seg[node] = seg[2 * node] + seg[2 * node + 1];
    }
}
 
long long query(int node, int start, int end, int L, int R) {
    if (R < start || L > end) return 0;
    if (L <= start && end <= R) return seg[node];
    
    int mid = (start + end) / 2;
    return query(2 * node, start, mid, L, R) + query(2 * node + 1, mid + 1, end, L, R);
}
 
void update(int node, int start, int end, int idx, long long value) {
    if (start == end) {
        seg[node] = value;
    } else {
        int mid = (start + end) / 2;
        if (idx <= mid) {
            update(2 * node, start, mid, idx, value);
        } else {
            update(2 * node + 1, mid + 1, end, idx, value);
        }
        seg[node] = seg[2 * node] + seg[2 * node + 1];
    }
}
 
int main() {
    long long n, q;
    cin >> n >> q;
    vector<long long> arr(n);
    for (long long i = 0; i < n; i++) cin >> arr[i];
 
    build(arr, 1, 0, n - 1);
    
    while (q--) {
        long long type;
        cin >> type;
        if (type == 1) {
            long long k, u;
            cin >> k >> u;
            update(1, 0, n - 1, k - 1, u);
        } else {
            long long L, R;
            cin >> L >> R;
            cout << query(1, 0, n - 1, L - 1, R - 1) << "\n";
        }
    }
    
    return 0;

#####################################################################################


#include <bits/stdc++.h>
using namespace std;
 
const int MAX_N = 2e5;
vector<int> seg(4 * MAX_N);
vector<int> arr;
 
void build(int node, int start, int end) {
    if (start == end) {
        seg[node] = arr[start];
    } else {
        int mid = (start + end) / 2;
        build(2 * node, start, mid);
        build(2 * node + 1, mid + 1, end);
        seg[node] = min(seg[2 * node], seg[2 * node + 1]);
    }
}
 
void update(int node, int start, int end, int idx, int value) {
    if (start == end) {
        seg[node] = value;
        arr[idx] = value;
    } else {
        int mid = (start + end) / 2;
        if (idx <= mid) update(2 * node, start, mid, idx, value);
        else update(2 * node + 1, mid + 1, end, idx, value);
        seg[node] = min(seg[2 * node], seg[2 * node + 1]);
    }
}
 
int query(int node, int start, int end, int L, int R) {
    if (R < start || L > end) return INT_MAX;
    if (L<=start && end<=R) return seg[node];
    int mid = (start + end) / 2;
    return min(query(2 * node, start, mid, L, R),
               query(2 * node + 1, mid + 1, end, L, R));
}
 
int main() {
    int n, q;
    cin >> n >> q;
    arr.resize(n);
    for (int i = 0; i < n; i++) cin >> arr[i];
 
    build(1, 0, n - 1);
    
    vector<int> ans;
    for (int i = 0; i < q; i++) {
        int type;
        cin >> type;
        if (type == 1) {
            int k, u;
            cin >> k >> u;
            update(1, 0, n - 1, k - 1, u);
        } else {
            int a, b;
            cin >> a >> b;
            ans.push_back(query(1, 0, n - 1, a - 1, b - 1));
        }
    }
    
    for (int res : ans) cout << res << "\n";
    return 0;



##########################################################################################



#include <bits/stdc++.h>
using namespace std;
 
const int MAX_N = 2e5;
vector<long long> seg(4 * MAX_N), lazy(4 * MAX_N);
vector<long long> arr;
 
// Function to build the segment tree
void build(int node, int start, int end) {
    if (start == end) {
        seg[node] = arr[start]; 
    } else {
        int mid = (start + end) / 2;
        build(2 * node, start, mid); // Left child
        build(2 * node + 1, mid + 1, end); // Right child
        seg[node] = min(seg[2 * node], seg[2 * node + 1]); 
    }
}
 

void push(int node, int start, int end) {
    if (lazy[node] != 0) {
        seg[node] += lazy[node];
 
        if (start != end) {
            lazy[2 * node] += lazy[node]; 
            lazy[2 * node + 1] += lazy[node];
        }
        lazy[node] = 0; 
    }
}
 

void range_update(int node, int start, int end, int l, int r, long long val) {
    push(node, start, end); 
 
    if (r < start || end < l) return; 
    if (l <= start && end <= r) { 
        lazy[node] += val; 
        push(node, start, end); 
        return;
    }
 
    // Partial overlap
    int mid = (start + end) / 2;
    range_update(2 * node, start, mid, l, r, val); 
    range_update(2 * node + 1, mid + 1, end, l, r, val);
 
    seg[node] = min(seg[2 * node], seg[2 * node + 1]);
}
 

long long point_query(int node, int start, int end, int idx) {
    push(node, start, end); // Apply any pending updates
 
    if (start == end) return seg[node]; 
    int mid = (start + end) / 2;
    if (idx <= mid)
        return point_query(2 * node, start, mid, idx); 
    else
        return point_query(2 * node + 1, mid + 1, end, idx); 
}
 
int main() {
    int n, q;
    cin >> n >> q;
    arr.resize(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
 
    // Build the initial segment tree
    build(1, 0, n - 1);
 
    vector<int> ans;
    for (int i = 0; i < q; i++) {
        int type;
        cin >> type;
        if (type == 1) {
            int a, b, u;
            cin >> a >> b >> u;
            range_update(1, 0, n - 1, a - 1, b - 1, u);
        } else {
            int k;
            cin >> k;
            ans.push_back(point_query(1, 0, n - 1, k - 1));
        }
    }
 
    // Output the results of queries of type 2
    for (int res : ans) {
        cout << res << "\n";
    }
 
    return 0;
}



###################################################################




int main() {
    int n, q;
    cin >> n >> q;
    arr.resize(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    
    build(1, 0, n - 1);

    vector<long long> ans; 
    for (int i = 0; i < q; i++) {
        int type;
        cin >> type;
        if (type == 1) {
            int a, b;
            long long u;
            cin >> a >> b >> u;
            range_update(1, 0, n - 1, a - 1, b - 1, u);
        } else {
            int k;
            cin >> k;
            ans.push_back(point_query(1, 0, n - 1, k - 1));
        }
    }

    
    for (long long res : ans) {
        cout << res << "\n";
    }

    return 0;
}

