#include <bits/stdc++.h>
using namespace std;
 
const int MAX = 1000;
int n, m;
vector<string> grid;
pair<int, int> start, destination;
 
int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, 1, -1};
char dirChar[4] = {'D', 'U', 'R', 'L'};
bool visited[MAX][MAX];
char from[MAX][MAX];
pair<int, int> parent[MAX][MAX];
 
bool is_valid(int x, int y) {
    return x >= 0 && x < n && y >= 0 && y < m && grid[x][y] != '#' && !visited[x][y];
}
 
bool bfs() {
    queue<pair<int, int>> q;
    q.push(start);
    visited[start.first][start.second] = true;
 
    while (!q.empty()) {
        auto [x, y] = q.front(); q.pop();
 
        if (make_pair(x, y) == destination) return true;
 
        for (int i = 0; i < 4; ++i) {
            int nx = x + dx[i];
            int ny = y + dy[i];
 
            if (is_valid(nx, ny)) {
                visited[nx][ny] = true;
                from[nx][ny] = dirChar[i];
                parent[nx][ny] = {x, y};
                q.push({nx, ny});
            }
        }
    }
 
    return false;
}
 
string reconstruct_path() {
    string path;
    pair<int, int> cur = destination;
 
    while (cur != start) {
        char d = from[cur.first][cur.second];
        path += d;
        cur = parent[cur.first][cur.second];
    }
 
    reverse(path.begin(), path.end());
    return path;
}
 
int main() {
    cin >> n >> m;
    grid.resize(n);
    for (int i = 0; i < n; ++i) {
        cin >> grid[i];
        for (int j = 0; j < m; ++j) {
            if (grid[i][j] == 'A') start = {i, j};
            if (grid[i][j] == 'B') destination = {i, j};
        }
    }
 
    if (bfs()) {
        string path = reconstruct_path();
        cout << "YES\n";
        cout << path.size() << "\n";
        cout << path << "\n";
    } else {
        cout << "NO\n";
    }
 
